# HTTP to HTTPS 리다이렉트 (프로덕션에서만 사용)
# server {
#     listen 80;
#     server_name your-project.com www.your-project.com;
#     
#     # Let's Encrypt ACME 챌린지 허용
#     location /.well-known/acme-challenge/ {
#         root /var/www/certbot;
#     }
#     
#     # 나머지는 HTTPS로 리다이렉트
#     location / {
#         return 301 https://$server_name$request_uri;
#     }
# }

# HTTP 서버
server {
    listen 80;
    server_name wantitnest.co.kr www.wantitnest.co.kr;
    
    # 정적 파일 루트 디렉토리
    root /usr/share/nginx/html;
    index index.html;

    location /socket.io/ {
        proxy_pass http://nodejs-chat;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 86400;
    }
    
    # Node.js 채팅 HTTP API (이미 /api/chat/ 구조로 되어 있음!)
    location /api/chat/ {
        proxy_pass http://nodejs-chat/api/chat/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # 챗봇 API 요청을 ChatBot 서버로 프록시 (FastAPI)
    location /api/ai/ {
        # Rate Limiting 적용 (챗봇은 조금 더 관대하게)
        limit_req zone=api_limit burst=30 nodelay;
        
        proxy_pass http://chatbot_api/api/ai/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_cache_bypass $http_upgrade;
        
        # 챗봇 응답 대기 시간 (AI 응답이 오래 걸릴 수 있음)
        proxy_connect_timeout 60s;
        proxy_send_timeout 120s;
        proxy_read_timeout 120s;
        
        # CORS 헤더 설정
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        
        # Preflight 요청 처리
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }   
    }
    
    # API 요청을 Backend 서버로 프록시 (Spring Boot)
    location /api/ {
        # Rate Limiting 적용
        limit_req zone=api_limit burst=20 nodelay;
        
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_cache_bypass $http_upgrade;
        
        # 타임아웃 설정
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # CORS 헤더 설정
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        
        # Preflight 요청 처리
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }
    
    # 업로드된 이미지 파일 프록시 (캐싱 포함)
    location /uploaded-images/ {
        proxy_pass http://backend;
        
        # 프록시 헤더 설정
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 타임아웃 설정
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # 캐싱 설정 (이미지는 자주 변경되지 않으므로)
        expires 1M;
        add_header Cache-Control "public, immutable";
        
        # 에러 페이지 처리
        proxy_intercept_errors on;
        error_page 404 = @image_not_found;
    }

    # 이미지 없을 때 기본 이미지 반환
    location @image_not_found {
        return 404 '{"error": "Image not found"}';
        add_header Content-Type application/json;
    }
    
    # 정적 자산에 대한 캐싱 설정 (uploaded-images 제외)
    location ~* ^/(?!uploaded-images/).*\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options "nosniff";
        try_files $uri =404;
        
        # Gzip 압축
        gzip_static on;
    }
    
    # React SPA를 위한 fallback 설정
    location / {
        # Rate Limiting
        limit_req zone=general_limit burst=100 nodelay;
        
        try_files $uri $uri/ /index.html;
        
        # HTML 파일은 캐시하지 않음 (SPA 업데이트를 위해)
        location = /index.html {
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
            add_header X-Content-Type-Options "nosniff";
        }
    }
    
    # 에러 페이지 설정
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
    
    # 보안: 민감한 파일 접근 차단
    location ~ /\. {
        deny all;
    }
    
    location ~ ^/(\.env|\.git|docker-compose|Dockerfile) {
        deny all;
    }
}
